---
title: "Today's NBA Skins Picks"
format:
  html:
    self-contained: true
    grid:
      body-width: 1200px
    css: |
      table {
        width: auto !important;
        margin-left: auto;
        margin-right: auto;
      }
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
# Load all required packages for the whole document
if (!require("pacman")) install.packages("pacman")
pacman::p_load(rvest, httr, dplyr, tidyr, stringr, lubridate, tibble, knitr, kableExtra, readr)

# Create history directory - use relative path that works in both local and GitHub Actions
history_dir <- "skins_history"
if (!dir.exists(history_dir)) {
  dir.create(history_dir, recursive = TRUE)
}
```

```{r timestamp}
#| echo: false
#| results: 'asis'
ts <- format(Sys.time(), "%A, %B %d, %Y at %I:%M %p %Z", tz = "America/Chicago")
cat(paste0("<p style='font-size:14px; color:#555;'><strong>Last updated:</strong> ", ts, "</p>"))
```

This page shows the expected skins for today's NBA games, based on live odds.

```{r expected_skins_data}
#| echo: false
#| message: false
#| warning: false

# --- Part 1: Scrape Expected Odds ---
url <- paste0("https://www.sportsline.com/nba/odds/money-line/",
              "?t=", format(Sys.time(), "%Y%m%d%H%M%S"))
googlebot_ua <- "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"

page_session <- rvest::session(url, httr::user_agent(googlebot_ua))
html_content <- rvest::read_html(page_session)
game_data_raw <- html_content %>% html_element("table") %>% html_table()

# Extract correct columns and clean team names
game_data <- data.frame(
  Matchup_raw = game_data_raw[[1]],
  consensus = game_data_raw[[3]],
  stringsAsFactors = FALSE
) %>%
  mutate(
    # Remove the record (e.g., "2-1") from team names
    Matchup = str_remove(Matchup_raw, "\\d+-\\d+$")
  )

# --- Part 2: Define Skins Picks ---
draft_data <- tribble(
  ~Team, ~Matchup_Key, ~abbr, ~skins_pick, ~player,
  "Utah Jazz", "Jazz|Utah", "UTA", "L", "Eristeo",
  "Oklahoma City Thunder", "Thunder|Oklahoma", "OKC", "W", "Matt",
  "Washington Wizards", "Wizards|Washington", "WSH", "L", "Brian",
  "Brooklyn Nets", "Nets|Brooklyn", "BKN", "L", "Adam",
  "Cleveland Cavaliers", "Cavaliers|Cleveland", "CLE", "W", "Thomas",
  "Charlotte Hornets", "Hornets|Charlotte", "CHA", "L", "Brian",
  "Denver Nuggets", "Nuggets|Denver", "DEN", "W", "Thomas",
  "New York Knicks", "Knicks|New York", "NY", "W", "Adam",
  "Houston Rockets", "Rockets|Houston", "HOU", "W", "Kenneth",
  "Phoenix Suns", "Suns|Phoenix", "PHX", "L", "Eristeo",
  "New Orleans Pelicans", "Pelicans|New Orleans", "NO", "L", "Matt",
  "Orlando Magic", "Magic|Orlando", "ORL", "W", "Kenneth",
  "Chicago Bulls", "Bulls|Chicago", "CHI", "L", "Thomas",
  "Los Angeles Clippers", "Clippers|LA Clippers", "LAC", "W", "Eristeo",
  "Minnesota Timberwolves", "Timberwolves|Minnesota", "MIN", "W", "Matt",
  "Portland Trail Blazers", "Trail Blazers|Portland", "POR", "L", "Kenneth",
  "Atlanta Hawks", "Hawks|Atlanta", "ATL", "W", "Adam",
  "Los Angeles Lakers", "Lakers|LA Lakers", "LAL", "W", "Adam",
  "Golden State Warriors", "Warriors|Golden State", "GS", "W", "Kenneth",
  "Sacramento Kings", "Kings|Sacramento", "SAC", "L", "Thomas",
  "Detroit Pistons", "Pistons|Detroit", "DET", "W", "Brian",
  "Indiana Pacers", "Pacers|Indiana", "IND", "L", "Eristeo",
  "Miami Heat", "Heat|Miami", "MIA", "L", "Matt",
  "Philadelphia 76ers", "76ers|Philadelphia", "PHI", "W", "Matt",
  "Toronto Raptors", "Raptors|Toronto", "TOR", "L", "Brian",
  "Milwaukee Bucks", "Bucks|Milwaukee", "MIL", "W", "Brian",
  "San Antonio Spurs", "Spurs|San Antonio", "SAS", "W", "Eristeo",
  "Memphis Grizzlies", "Grizzlies|Memphis", "MEM", "W", "Kenneth",
  "Boston Celtics", "Celtics|Boston", "BOS", "W", "Adam",
  "Dallas Mavericks", "Mavericks|Dallas", "DAL", "W", "Thomas"
)

# --- Part 3: Calculate Expected Skins ---
convert_odds_to_prob <- function(odds) {
  prob <- case_when(
    odds < 0 ~ abs(odds) / (abs(odds) + 100),
    odds > 0 ~ 100 / (odds + 100),
    TRUE ~ NA_real_
  )
  return(prob)
}

today_ct <- as_date(now(tzone = "America/Chicago"))
current_year <- year(today_ct)

# FIXED: Use word boundaries to prevent "Hornets" from matching "Nets"
match_team <- function(matchup_str, draft_data) {
  matchup_upper <- str_to_upper(matchup_str)
  for (i in 1:nrow(draft_data)) {
    keys <- str_split(draft_data$Matchup_Key[i], "\\|")[[1]]
    keys_upper <- str_to_upper(keys)
    
    # Check if any of the keys match (with word boundaries)
    for (key in keys_upper) {
      pattern <- paste0("\\b", key, "\\b")
      if (str_detect(matchup_upper, regex(pattern))) {
        return(draft_data$Matchup_Key[i])
      }
    }
  }
  return(NA_character_)
}

# Parse based on actual structure
todays_picks <- game_data %>%
  filter(!is.na(Matchup) & Matchup != "") %>%
  mutate(
    row_id = row_number(),
    game_time_str = str_extract(Matchup_raw, 
      "(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+\\d+,\\s+\\d+:\\d+\\s*[AP]M\\s+UTC")
  ) %>%
  # Fill UP because date rows come AFTER team rows
  fill(game_time_str, .direction = "up") %>%
  # Filter out the "Expert Picks" and "Advanced Insights" rows
  filter(!str_detect(Matchup, "Expert Picks|Advanced Insights")) %>%
  # Only keep rows with actual odds (contains +/- numbers)
  filter(str_detect(consensus, "[+-]\\d+")) %>%
  mutate(
    Matchup_Key = vapply(Matchup, match_team, draft_data = draft_data, FUN.VALUE = character(1)),
    game_time_str_with_year = paste(game_time_str, current_year),
    game_time_utc = parse_date_time(
      str_remove(game_time_str_with_year, "\\s+UTC"),
      orders = c("b d, I:M p Y"),
      tz = "UTC"
    ),
    game_time_ct = with_tz(game_time_utc, tzone = "America/Chicago"),
    game_date_ct = as_date(game_time_ct),
    # Create game_id: every 2 consecutive rows are a game
    game_id = paste0(game_date_ct, "_", ceiling(row_number() / 2))
  ) %>%
  filter(game_date_ct == today_ct, !is.na(Matchup_Key)) %>%
  mutate(
    # Extract odds from format like "-175Open: -189"
    moneyline = as.numeric(str_extract(consensus, "^[+-]?\\d+")),
    opening_odds = as.numeric(str_extract(consensus, "(?<=Open: )[+-]?\\d+"))
  ) %>%
  # Remove duplicates - keep one row per team per game
  distinct(Matchup_Key, game_id, .keep_all = TRUE) %>%
  mutate(implied_prob = convert_odds_to_prob(moneyline)) %>%
  group_by(game_id) %>%
  mutate(
    total_prob_in_game = sum(implied_prob, na.rm = TRUE),
    prob_no_vig = implied_prob / total_prob_in_game
  ) %>%
  ungroup() %>%
  left_join(draft_data, by = "Matchup_Key") %>%
  filter(!is.na(Team)) %>%
  mutate(
    expected_skins = if_else(skins_pick == "W", prob_no_vig, 1 - prob_no_vig),
    Date = today_ct
  ) %>%
  select(Date, Team, Pick = skins_pick, "Expected Skins" = expected_skins,
         Player = player, Moneyline = moneyline, "Implied Prob" = prob_no_vig,
         Abbr = abbr, game_id) %>%
  arrange(desc(`Expected Skins`))
```

```{r expected_team_table}
#| echo: false

# Print Table 1: Today's Expected Skins by Team
if (nrow(todays_picks) > 0) {
  knitr::kable(
    select(todays_picks, -game_id, -Abbr, -Date), 
    digits = 3, 
    caption = "Today's Expected Skins by Team"
  ) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
    column_spec(3, bold = TRUE)
} else {
  cat("<p style='color:#666;'>No games scheduled for today.</p>")
}
```

```{r expected_player_table}
#| echo: false

# Print Table 2: Total Expected Skins by Player
if (nrow(todays_picks) > 0) {
  player_summary <- todays_picks %>%
    group_by(Player) %>%
    summarise(`Total Expected Skins` = sum(`Expected Skins`, na.rm = TRUE), .groups = 'drop') %>%
    arrange(desc(`Total Expected Skins`))
  
  knitr::kable(player_summary, digits = 3, caption = "Total Expected Skins by Player") %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
}
```

```{r zero_sum_table}
#| echo: false

# Print Table 3: Zero-Sum Matchups
if (nrow(todays_picks) > 0) {
  zero_sum_games <- todays_picks %>%
    group_by(game_id) %>%
    filter(
      n() == 2, # Exactly 2 teams in the game
      (all(Pick == "W") | all(Pick == "L")) # Both W or both L (creates zero-sum)
    ) %>%
    mutate(
      matchup_type = if_else(all(Pick == "W"), "Both W", "Both L"),
      matchup_str = paste0(Abbr, " (", Player, ")")
    ) %>%
    summarise(
      `Zero-Sum Matchup` = paste(matchup_str, collapse = " vs. "),
      Type = first(matchup_type),
      .groups = 'drop'
    )
  
  if (nrow(zero_sum_games) > 0) {
    knitr::kable(select(zero_sum_games, -game_id), caption = "Today's Zero-Sum Matchups") %>%
      kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
      row_spec(0, bold = TRUE, color = "white", background = "#444444")
  } else {
    cat("<h3>Today's Zero-Sum Matchups</h3>")
    cat("<p>No zero-sum matchups today.</p>")
  }
}
```

---

## Today's Results & Skins Luck

This section scrapes `cleaningtheglass.com` for game results. Games that are final or in-progress will appear here.

```{r results_and_luck}
#| echo: false
#| message: false
#| warning: false

# Only process results if we have games today
if (nrow(todays_picks) > 0) {
  
  # 1. Scrape the Live Game Data
  url_scores <- "https://cleaningtheglass.com/stats/games/"
  page_scores <- read_html(url_scores)
  scores_table <- page_scores %>%
    html_element("table") %>%
    html_table()
  
  # 2. Clean and Reshape the Scraped 'scores_table'
  game_results_wide <- scores_table %>%
    select(Abbr = 2, PTS_Str = 3) %>%
    mutate(PTS = suppressWarnings(as.numeric(PTS_Str))) %>%
    filter(!is.na(PTS)) %>%
    mutate(Game_ID = ceiling(row_number() / 2)) %>%
    group_by(Game_ID) %>%
    mutate(Team_Num = row_number()) %>%
    ungroup() %>%
    pivot_wider(
      id_cols = Game_ID,
      names_from = Team_Num,
      values_from = c(Abbr, PTS)
    )
  
  # 3. Create a final 'Won_Game' lookup table
  team_1_results <- game_results_wide %>%
    select(Abbr = Abbr_1, PTS = PTS_1, Opp_PTS = PTS_2) %>%
    mutate(Won_Game = PTS > Opp_PTS)
  
  team_2_results <- game_results_wide %>%
    select(Abbr = Abbr_2, PTS = PTS_2, Opp_PTS = PTS_1) %>%
    mutate(Won_Game = PTS > Opp_PTS)
  
  final_team_results <- bind_rows(team_1_results, team_2_results) %>%
    select(Abbr, Won_Game)
  
  # 4. Create todays_results with actual outcomes
  todays_results <- todays_picks %>%
    left_join(final_team_results, by = "Abbr") %>%
    mutate(
      Actual_Skins = case_when(
        Won_Game == TRUE & Pick == "W" ~ 1,
        Won_Game == FALSE & Pick == "L" ~ 1,
        is.na(Won_Game) ~ NA_real_,
        TRUE ~ 0
      ),
      Skins_Luck = Actual_Skins - `Expected Skins`
    )
  
  # 5. Save today's results to file (use underscores for easier CSV handling)
  today_file <- file.path(history_dir, paste0(today_ct, ".csv"))
  todays_results %>%
    select(Date, Player, Team, Abbr, Pick, Expected_Skins = `Expected Skins`, Won_Game, Actual_Skins, Skins_Luck) %>%
    write_csv(today_file)
  
  # 6. Print Table 4: Completed Games Summary
  completed_games_table <- todays_results %>%
    filter(!is.na(Won_Game)) %>%
    select(
      Player,
      Team,
      Pick,
      `Won Game?` = Won_Game,
      `Actual Skins` = Actual_Skins,
      `Expected Skins`,
      `Skins Luck` = Skins_Luck
    ) %>%
    arrange(Player, Team)
  
  if (nrow(completed_games_table) > 0) {
    knitr::kable(completed_games_table, digits = 3, caption = "Skins Results for Completed Games") %>%
      kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
      column_spec(c(5, 7), bold = TRUE)
  } else {
    cat("<p style='color:#666;'>No games have been completed yet today.</p>")
  }
  
} else {
  cat("<p style='color:#666;'>No games scheduled for today.</p>")
}
```

```{r final_player_summary}
#| echo: false
#| message: false
#| warning: false

# Print Table 5: Final Player Summary
if (exists("todays_results") && nrow(todays_results) > 0) {
  final_player_summary <- todays_results %>%
    group_by(Player) %>%
    summarise(
      `Total Expected Skins` = sum(`Expected Skins`, na.rm = TRUE),
      `Total Actual Skins` = sum(Actual_Skins, na.rm = TRUE),
      `Skins Luck` = sum(Skins_Luck, na.rm = TRUE),
      .groups = 'drop'
    ) %>%
    arrange(desc(`Skins Luck`))
  
  knitr::kable(
    final_player_summary,
    digits = 3,
    caption = "Final Player Summary (Expected vs. Actual)"
  ) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
    column_spec(4, bold = TRUE)
}
```

---

## Yesterday's Results

```{r yesterday_results}
#| echo: false
#| message: false
#| warning: false

yesterday_ct <- today_ct - days(1)
yesterday_file <- file.path(history_dir, paste0(yesterday_ct, ".csv"))

if (file.exists(yesterday_file)) {
  yesterday_data <- read_csv(yesterday_file, show_col_types = FALSE)
  
  # Yesterday's Completed Games
  yesterday_completed <- yesterday_data %>%
    filter(!is.na(Won_Game)) %>%
    select(
      Player,
      Team,
      Pick,
      Won_Game,
      Actual_Skins,
      Expected_Skins,
      Skins_Luck
    ) %>%
    rename(
      `Won Game?` = Won_Game,
      `Actual Skins` = Actual_Skins,
      `Expected Skins` = Expected_Skins,
      `Skins Luck` = Skins_Luck
    ) %>%
    arrange(Player, Team)
  
  if (nrow(yesterday_completed) > 0) {
    cat(paste0("<h3>", format(yesterday_ct, "%A, %B %d, %Y"), " - Skins Results</h3>"))
    
    knitr::kable(yesterday_completed, digits = 3) %>%
      kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
      column_spec(c(5, 7), bold = TRUE)
    
    # Yesterday's Player Summary
    yesterday_player_summary <- yesterday_data %>%
      group_by(Player) %>%
      summarise(
        Total_Expected_Skins = sum(Expected_Skins, na.rm = TRUE),
        Total_Actual_Skins = sum(Actual_Skins, na.rm = TRUE),
        Skins_Luck_Total = sum(Skins_Luck, na.rm = TRUE),
        .groups = 'drop'
      ) %>%
      rename(
        `Total Expected Skins` = Total_Expected_Skins,
        `Total Actual Skins` = Total_Actual_Skins,
        `Skins Luck` = Skins_Luck_Total
      ) %>%
      arrange(desc(`Skins Luck`))
    
    cat("<br>")
    knitr::kable(
      yesterday_player_summary,
      digits = 3,
      caption = paste0(format(yesterday_ct, "%B %d"), " - Player Summary")
    ) %>%
      kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
      column_spec(4, bold = TRUE)
  } else {
    cat(paste0("<p style='color:#666;'>No completed games found for ", format(yesterday_ct, "%A, %B %d, %Y"), ".</p>"))
  }
} else {
  cat(paste0("<p style='color:#666;'>No data available for ", format(yesterday_ct, "%A, %B %d, %Y"), ".</p>"))
}
```

---

## Year-to-Date Cumulative Stats

```{r ytd_cumulative}
#| echo: false
#| message: false
#| warning: false

# Read all historical files
all_files <- list.files(history_dir, pattern = "\\.csv$", full.names = TRUE)

if (length(all_files) > 0) {
  # Read and combine all historical data using base R
  all_history <- bind_rows(lapply(all_files, function(f) read_csv(f, show_col_types = FALSE)))
  
  # Filter for current year only
  current_year <- year(today_ct)
  ytd_data <- all_history %>%
    filter(year(Date) == current_year, !is.na(Actual_Skins))
  
  if (nrow(ytd_data) > 0) {
    ytd_summary <- ytd_data %>%
      group_by(Player) %>%
      summarise(
        Games = n(),
        Total_Expected_Skins = sum(Expected_Skins, na.rm = TRUE),
        Total_Actual_Skins = sum(Actual_Skins, na.rm = TRUE),
        Cumulative_Skins_Luck = sum(Skins_Luck, na.rm = TRUE),
        .groups = 'drop'
      ) %>%
      mutate(
        Avg_Skins_Luck_per_Game = Cumulative_Skins_Luck / Games
      ) %>%
      rename(
        `Total Expected Skins` = Total_Expected_Skins,
        `Total Actual Skins` = Total_Actual_Skins,
        `Cumulative Skins Luck` = Cumulative_Skins_Luck,
        `Avg Skins Luck per Game` = Avg_Skins_Luck_per_Game
      ) %>%
      arrange(desc(`Cumulative Skins Luck`))
    
    knitr::kable(
      ytd_summary,
      digits = 3,
      caption = paste0(current_year, " Year-to-Date Cumulative Stats")
    ) %>%
      kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
      column_spec(5, bold = TRUE)
  } else {
    cat("<p style='color:#666;'>No completed games in year-to-date history.</p>")
  }
} else {
  cat("<p style='color:#666;'>No historical data available yet.</p>")
}
```
